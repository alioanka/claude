version: '3.8'

services:
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto-trading-bot
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://trading_user:trading_pass@postgres:5432/trading_bot
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs:rw
      - ./storage:/app/storage:rw
      - ./config:/app/config:rw
      - /etc/localtime:/etc/localtime:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trading-network
    ports:
      - "8000:8000"  # Health check and API endpoint
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:15-alpine
    container_name: trading-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=trading_user
      - POSTGRES_PASSWORD=trading_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: trading-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "redis_password", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: trading-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_password
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - trading-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: InfluxDB for metrics
  influxdb:
    image: influxdb:2.7-alpine
    container_name: trading-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=trading_metrics
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=admin_password
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - trading-network
    profiles:
      - monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Web dashboard
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: trading-dashboard
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - API_URL=http://trading-bot:8000
      - GRAFANA_URL=http://grafana:3000
    depends_on:
      - trading-bot
    networks:
      - trading-network
    profiles:
      - dashboard
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup service - runs daily
  backup:
    image: postgres:15-alpine
    container_name: trading-backup
    restart: "no"
    environment:
      - POSTGRES_DB=trading_bot
      - POSTGRES_USER=trading_user  
      - POSTGRES_PASSWORD=trading_pass
    volumes:
      - ./storage/backups:/backups:rw
      - postgres_data:/var/lib/postgresql/data:ro
    networks:
      - trading-network
    command: >
      sh -c "
        echo 'Starting backup service...'
        while true; do
          echo 'Creating database backup...'
          BACKUP_FILE=/backups/backup_$(date +%Y%m%d_%H%M%S).sql
          pg_dump -h postgres -U trading_user -d trading_bot > $$BACKUP_FILE
          
          if [ $$? -eq 0 ]; then
            echo 'Backup created successfully: $$BACKUP_FILE'
            gzip $$BACKUP_FILE
            echo 'Backup compressed'
          else
            echo 'Backup failed!'
          fi
          
          echo 'Cleaning old backups...'
          find /backups -name '*.sql.gz' -mtime +7 -delete
          echo 'Old backups cleaned'
          
          echo 'Sleeping for 24 hours...'
          sleep 86400
        done
      "
    profiles:
      - backup
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log aggregation service
  fluentd:
    image: fluentd:v1.16-debian
    container_name: trading-fluentd
    restart: unless-stopped
    volumes:
      - ./logs:/fluentd/log:ro
      - ./monitoring/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - trading-network
    profiles:
      - logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: trading-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./storage/static:/var/www/static:ro
    depends_on:
      - trading-bot
      - grafana
    networks:
      - trading-network
    profiles:
      - production
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  influxdb_data:
    driver: local

networks:
  trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1